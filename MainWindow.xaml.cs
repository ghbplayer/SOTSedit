using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Microsoft.Win32;
using System.Diagnostics;

namespace SOTSEdit
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>

    //ObservableCollection rather than List for performance?
        
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        public void OnWindowLoaded(object sender, RoutedEventArgs e)
        {
#if DEMO
            this.Title += " DEMO VERSION";
#endif
            originalTitle = this.Title;
            string configName = "SOTSEdit.cfg";
            
            try{
                config = new Config(configName);
#if CompressCFG
                Gzip.writeCompressedHex("readme.txt");
                Gzip.writeCompressedHex(configName);
#endif
            }
            catch
            {
                byte[] cfgCompressed = {0x1F,0x8B,0x08,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0xEC,0xBD,0x07,0x60,0x1C,0x49,0x96,0x25,0x26,0x2F,0x6D,0xCA,0x7B,0x7F,0x4A,0xF5,0x4A,0xD7,0xE0,0x74,0xA1,0x08,0x80,0x60,0x13,0x24,0xD8,0x90,0x40,0x10,0xEC,0xC1,0x88,0xCD,0xE6,0x92,0xEC,0x1D,0x69,0x47,0x23,0x29,0xAB,0x2A,0x81,0xCA,0x65,0x56,0x65,0x5D,0x66,0x16,0x40,0xCC,0xED,0x9D,0xBC,0xF7,0xDE,0x7B,0xEF,0xBD,0xF7,0xDE,0x7B,0xEF,0xBD,0xF7,0xBA,0x3B,0x9D,0x4E,0x27,0xF7,0xDF,0xFF,0x3F,0x5C,0x66,0x64,0x01,0x6C,0xF6,0xCE,0x4A,0xDA,0xC9,0x9E,0x21,0x80,0xAA,0xC8,0x1F,0x3F,0x7E,0x7C,0x1F,0x3F,0x22,0x9A,0x7C,0xDA,0x16,0xD5,0x72,0xF4,0x7A,0xBD,0x58,0x64,0xF5,0xB5,0xFB,0x59,0x56,0x6D,0xF2,0x63,0x45,0x9B,0x2F,0x46,0x9F,0x67,0x8B,0xFC,0x05,0xFD,0xDF,0xFD,0xD2,0xB4,0x75,0xB1,0xBC,0x18,0x9D,0x67,0x65,0x93,0x6B,0xA3,0x37,0xEB,0x7A,0x29,0xFF,0x14,0xCB,0x36,0xF8,0xE6,0xF5,0x75,0x43,0x3F,0x9A,0xD1,0x8B,0xF5,0x82,0x7E,0xED,0x7D,0x7D,0x32,0xCF,0xA7,0x6F,0x9B,0xB5,0xF7,0x0B,0xB5,0x48,0x0C,0x5A,0x2F,0xCB,0xEC,0x3A,0xAF,0xD3,0xD7,0x79,0xDB,0x52,0x8F,0x0D,0xA3,0x35,0x7A,0x9D,0x37,0x0D,0x7D,0xA9,0x00,0xCE,0x1A,0x34,0x32,0x3F,0x9A,0x79,0x55,0xB7,0xA3,0xB6,0x5E,0xE7,0xFC,0xCF,0x8F,0xD9,0x46,0x4F,0xF3,0x6C,0x66,0x7E,0x70,0xA3,0x1F,0xE3,0x47,0xBF,0xE7,0x61,0x3D,0x7B,0xF7,0x62,0x11,0x1B,0xDB,0x93,0x6C,0x76,0x81,0x6F,0x9F,0xCC,0x62,0xDF,0x1E,0x5F,0x66,0x6D,0x56,0xD3,0xD7,0xC7,0x97,0xB1,0xAF,0x5F,0x66,0x4D,0x73,0x55,0xD5,0xB3,0xD1,0xCB,0xAB,0xE8,0xEB,0x6F,0xF2,0x4C,0xFF,0x71,0x94,0x09,0x47,0xDF,0x8C,0xBE,0x5D,0x2D,0x72,0xD0,0xEE,0xEC,0x75,0xB3,0x32,0x03,0x7A,0x4A,0xDF,0x5E,0xD7,0x67,0xB3,0x77,0x3D,0x8A,0xF2,0x58,0x5E,0x96,0xF5,0xF5,0xD0,0x5C,0xBD,0x5E,0xE5,0xD3,0x22,0x6F,0x5E,0x1D,0x7F,0xD7,0xFC,0xCA,0x30,0x7A,0x44,0x33,0x5F,0x06,0x30,0x7C,0xAA,0x9D,0xCD,0xF2,0xAC,0x94,0x7F,0x5F,0xAF,0x0B,0xC2,0xA2,0xAC,0x32,0xC3,0x35,0x6F,0xAA,0x32,0xAF,0xB3,0xE5,0x34,0x1F,0xE1,0x2B,0xFA,0x2B,0xF8,0xF6,0x75,0x76,0x29,0xF3,0x99,0x5D,0xF2,0x7C,0xCB,0xA7,0xAF,0xF2,0x26,0xCF,0xEA,0xE9,0x3C,0xFD,0xBD,0xF1,0xEB,0x17,0xD5,0x2C,0x78,0xC7,0x7E,0xFB,0x7A,0x9A,0x95,0x39,0xFE,0x7C,0x3D,0x0D,0xA1,0x9E,0x7D,0x49,0x6F,0x7E,0xB9,0x6E,0xBB,0x6F,0xD2,0xE7,0xF2,0xCE,0xEB,0x69,0xEC,0xDB,0xE5,0x94,0xE8,0x4B,0x6F,0xD2,0x2F,0xDD,0xEF,0x5E,0x56,0xAB,0xCF,0xEB,0xEA,0xAA,0x05,0x4A,0xF4,0x7B,0xF7,0xEB,0x37,0x79,0x5D,0x67,0xE7,0x55,0xBD,0xA0,0xAF,0xF9,0x77,0xD7,0xC0,0x0A,0x96,0x12,0x11,0x73,0xA7,0x32,0xE0,0xCF,0x13,0x7F,0x1C,0x99,0x23,0x26,0x6A,0xFA,0xED,0xEC,0x07,0x19,0xB1,0x0E,0x35,0x5A,0x77,0xC0,0x12,0x6B,0x2C,0xF3,0xD6,0x4A,0xD5,0x8B,0xD9,0xE7,0xF5,0x9E,0x99,0x16,0xF9,0x8E,0x38,0x64,0x90,0x3B,0x3C,0xCE,0x30,0x13,0x52,0xFC,0x20,0x97,0x7F,0xDC,0x74,0x68,0xEF,0xBD,0xA9,0x25,0xCA,0x57,0xEB,0x7A,0x4A,0x83,0x7A,0x25,0xAC,0x63,0x24,0x81,0x04,0xBD,0xAE,0x8A,0x99,0xFB,0xFE,0x98,0x7E,0xDD,0xF3,0x5A,0x9C,0xBE,0x6B,0xEB,0xCC,0x7D,0xFD,0x45,0xF8,0xFE,0xD9,0xF2,0xBC,0xCE,0x08,0xAB,0xF5,0xB4,0x5D,0xD7,0xB9,0xFC,0xD9,0x99,0x29,0xBF,0xC1,0x27,0xA3,0x62,0x42,0x94,0x08,0x1A,0x2C,0x56,0x79,0x5D,0xD0,0x68,0x31,0x59,0x3E,0x64,0xF3,0xF9,0x27,0xA3,0x15,0xDE,0x31,0xEC,0xEE,0x58,0xF9,0xA4,0xB8,0x2C,0xCA,0x22,0x5B,0xF2,0x9B,0x27,0xDE,0xAB,0x5F,0x5E,0x2D,0xF3,0x9A,0x68,0xF9,0x25,0xFD,0x9F,0x3E,0x15,0xAD,0xE1,0x51,0xFA,0x9A,0xBF,0x7D,0x29,0xDF,0x7A,0x32,0x64,0x65,0xE4,0xCB,0xF4,0x4D,0x9D,0xCD,0x88,0xB8,0xAF,0x5A,0x37,0x19,0xBE,0x10,0x11,0x73,0xCE,0x8B,0x15,0x7D,0xDF,0x4C,0x87,0x1A,0x58,0x3E,0x03,0x94,0x73,0xAF,0x95,0x6B,0x22,0xD4,0x7A,0xFD,0xAA,0x18,0x82,0xF1,0xE5,0x65,0x5E,0xCF,0xB3,0xFA,0x32,0x6F,0x48,0x83,0xBE,0xAA,0xE6,0x3D,0xCE,0x38,0x9E,0x64,0xCB,0x19,0x11,0xE7,0x78,0x32,0x5B,0x46,0x54,0xE4,0x53,0x7A,0xB1,0xAE,0xAE,0xF3,0xD9,0xE8,0x69,0xD3,0x5E,0x7B,0x4A,0x54,0xBF,0x2F,0xDB,0xA2,0x91,0x7F,0xBC,0x77,0xCD,0x97,0x3F,0xF9,0xAC,0xCC,0x48,0xDC,0xF5,0x87,0xA5,0xA3,0x61,0x0B,0xF9,0x58,0x7F,0x74,0xBF,0x3D,0x96,0x8F,0xF5,0x47,0xF7,0xDB,0x67,0xF2,0xB1,0xFE,0xE8,0x7E,0xFB,0xB9,0x7C,0xAC,0x3F,0xBA,0xDF,0x9E,0x54,0x8B,0x49,0xD6,0x92,0x7E,0x6F,0x85,0x4B,0x43,0x9C,0x8F,0x67,0xB3,0x62,0xDA,0xD2,0x78,0x97,0xD9,0x6C,0xCA,0x73,0x97,0xE2,0xF1,0xBA,0x2E,0x73,0x15,0xC1,0x67,0x65,0x2B,0x3A,0xD4,0xD0,0xDD,0x74,0x9F,0xB5,0x39,0x37,0xF8,0xFC,0x59,0xF8,0xBD,0x69,0xF0,0xBA,0xCD,0x58,0x9C,0x21,0xC6,0xCB,0x67,0x31,0x10,0x5F,0x54,0xCB,0xA2,0xAD,0x6A,0xB4,0xF8,0xA2,0xDB,0xE2,0xFF,0x09,0x00,0x00,0xFF,0xFF,0xD6,0xDB,0x58,0x47,0xBD,0x07,0x00,0x00};
                byte[] cfg = Gzip.Decompress(cfgCompressed);
#if WriteCFG
                Gzip.write(configName, cfg);
#endif
				config = new Config(cfg);
            }
            if(config.errors != "")
                throw new Exception("I couldn't parse the config file. Aborting.\r\n" + config.errors);
            parser = new Parse(config.settings);
            utility = new Utility();

            closeFile();
            //CustomRoutedCommand.InputGestures
            //CommandBinding customCommandBinding = new CommandBinding(CustomRoutedCommand, ExecutedCustomCommand);

            //// attach CommandBinding to root window
            //this.CommandBindings.Add(customCommandBinding);
        }

        private void load(string fileName)
        {
            if (fileName.EndsWith(".sav", StringComparison.InvariantCultureIgnoreCase))
            {
                this.Title = originalTitle + " - " + fileName.Split('\\').Last();
                rawData = Gzip.Decompress(fileName);
#if WriteSOTS
                Gzip.write(fileName.Substring(0, fileName.Length - 4) + ".SOTS", rawData);
#endif
            }
            else
                rawData = Gzip.read(fileName);

            parse();
        }

        public void Load(object sender, RoutedEventArgs e)
        {
            Microsoft.Win32.OpenFileDialog dlg = new Microsoft.Win32.OpenFileDialog();
            
            dlg.DefaultExt = ".sav"; // Default file extension
            dlg.Filter = "SOTS1 saved games|*.sav|SOTS1 unpacked saves|*.SOTS"; // Filter files by extension

            // Process open file dialog box results
            if (dlg.ShowDialog() == true)
                load(dlg.FileName);
        }

        public void Save(object sender, RoutedEventArgs e)
        {
#if DEMO
            MessageBox.Show("This free demo version can't save data.", "Cannot save", MessageBoxButton.OK, MessageBoxImage.Warning);
#else
            if(rawData.Length > 0)
            {
                foreach(TabItem item in mainTabs.Items)
                    stopEdit((DataGrid)item.Content);   //fucking WPF
                Microsoft.Win32.SaveFileDialog dlg = new Microsoft.Win32.SaveFileDialog();
                string fileName = openFile.Split('\\').Last();
                dlg.DefaultExt = ".sav"; // Default file extension
                dlg.Filter = "SOTS1 saved games|*.sav"; // Filter files by extension

                // Process save file dialog box results
                if (dlg.ShowDialog() == true)
                {
                    parser.updateRawData(ref rawData);
                    Gzip.Compress(dlg.FileName, rawData);
                    load(dlg.FileName);
                }
            }
            else
                MessageBox.Show("No data loaded.", "Cannot save", MessageBoxButton.OK, MessageBoxImage.Warning);
#endif
        }

        private void parse()
        {
            if(!parser.parseSOTS(rawData))
            {
                MessageBox.Show("Failed to parse data file.", "Cannot load", MessageBoxButton.OK, MessageBoxImage.Warning);
                closeFile();
                return;
            }

            refreshData();
        }

        public void gotFocus(object sender, RoutedEventArgs e)
        {
            if (e.OriginalSource.GetType() == typeof(DataGridCell)
                && sender.GetType() == typeof(DataGrid))
            {
                DataGrid grid = (DataGrid)sender;
                grid.BeginEdit();
            }
        }

        public void lostFocus(object sender, RoutedEventArgs e)
        {
            if (e.OriginalSource.GetType() != typeof(DataGridCell)
                && sender.GetType() == typeof(DataGrid))
                stopEdit((DataGrid)sender);
        }

        private void stopEdit(DataGrid grid)
        {
            try{
                grid.CommitEdit(DataGridEditingUnit.Row, true);
            }
            catch
            {
                grid.CancelEdit();
                grid.CancelEdit(DataGridEditingUnit.Row);
            }
        }

        public void keyDown(object sender, RoutedEventArgs e)
        {
            KeyEventArgs a = (KeyEventArgs)e;
            if(a.Key == Key.Return &&
                a.OriginalSource.GetType() == typeof(TextBox) &&
                Keyboard.FocusedElement != null)
            {
                ((UIElement)Keyboard.FocusedElement).MoveFocus(new TraversalRequest(FocusNavigationDirection.Down));
                e.Handled = true;
            }
        }

        private void refreshData()
        {
            foreach(TabItem item in mainTabs.Items)
                stopEdit((DataGrid)item.Content);   //fucking WPF
            mainTabs.Items.Clear();
            int index = 0;

            for(int i = 0; i < parser.datasets.Count; ++i)
            {
                TabDataset dataset = parser.datasets[i];
                if(dataset.hidden)
                    continue;
                TabItem tab = new TabItem();
                tab.Header = dataset.name;
                dataset.index = index++;

                DataGrid grid = new DataGrid();
                grid.AddHandler(UIElement.LostFocusEvent, (RoutedEventHandler)lostFocus);     //enables single click edit
                grid.AddHandler(UIElement.GotFocusEvent, (RoutedEventHandler)gotFocus);     //enables single click edit
                grid.AddHandler(UIElement.PreviewKeyDownEvent, (RoutedEventHandler)keyDown);  //enables Enter to commit edit, edit cell below
                grid.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
                grid.VerticalAlignment   = System.Windows.VerticalAlignment.Stretch;
                grid.AutoGenerateColumns = false;
                //grid.Name                = dataset.name;

                for(int j = 0; j < dataset.factory.index; ++j)
                {
                    Attribute att = dataset.attributes[j];
                    if(att.hidden)
                        continue;
                    DataGridTextColumn col = new DataGridTextColumn();
                    col.Header = att.friendlyName;
                    col.IsReadOnly = !att.editable;

                    if (att.type == typeof(float))
                        col.Binding = new Binding("floats[" + att.index.ToString() + "]");
                    else if (att.type == typeof(int) || att.type == typeof(short) || att.type == typeof(char))
                        col.Binding = new Binding("ints[" + att.index.ToString() + "]");
                    else if (att.type == typeof(string))
                        col.Binding = new Binding("strings[" + att.index.ToString() + "]");

                    grid.Columns.Add(col);
                }

                grid.ItemsSource = dataset.data;
                tab.Content = grid;
                mainTabs.Items.Add(tab);
            }
        }

        public void CloseFile(object sender, RoutedEventArgs e)
        {
            closeFile();
        }
        
        public void showHelp(object sender, RoutedEventArgs e)
        {
            string temp = System.Environment.GetEnvironmentVariable("temp", EnvironmentVariableTarget.Machine) + "\\readme.txt";
            byte[] helpC = {0x1F,0x8B,0x08,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0xEC,0xBD,0x07,0x60,0x1C,0x49,0x96,0x25,0x26,0x2F,0x6D,0xCA,0x7B,0x7F,0x4A,0xF5,0x4A,0xD7,0xE0,0x74,0xA1,0x08,0x80,0x60,0x13,0x24,0xD8,0x90,0x40,0x10,0xEC,0xC1,0x88,0xCD,0xE6,0x92,0xEC,0x1D,0x69,0x47,0x23,0x29,0xAB,0x2A,0x81,0xCA,0x65,0x56,0x65,0x5D,0x66,0x16,0x40,0xCC,0xED,0x9D,0xBC,0xF7,0xDE,0x7B,0xEF,0xBD,0xF7,0xDE,0x7B,0xEF,0xBD,0xF7,0xBA,0x3B,0x9D,0x4E,0x27,0xF7,0xDF,0xFF,0x3F,0x5C,0x66,0x64,0x01,0x6C,0xF6,0xCE,0x4A,0xDA,0xC9,0x9E,0x21,0x80,0xAA,0xC8,0x1F,0x3F,0x7E,0x7C,0x1F,0x3F,0x22,0xFE,0xC7,0xBF,0xF7,0x1F,0x7C,0x33,0xCF,0x96,0x6F,0xD3,0xEB,0x6A,0x9D,0x9E,0x57,0x75,0xBA,0x6E,0x8A,0xE5,0x45,0xDA,0xCE,0xF3,0xF4,0xF5,0x55,0x55,0xCF,0xD2,0xEA,0x5C,0xFE,0x68,0xB3,0xBA,0x49,0x77,0xC7,0x07,0x3B,0xE9,0x27,0xBB,0x0F,0xD3,0x26,0xBB,0xCC,0xD3,0x8B,0x6C,0x91,0xA7,0xF9,0xAC,0x68,0xAB,0x7A,0x94,0xBE,0xFE,0xF2,0xCD,0xEB,0x53,0xFA,0x7D,0xFC,0x1B,0x27,0xBF,0x71,0xF2,0x66,0x5E,0x34,0xFA,0x4D,0x9A,0x95,0x65,0x75,0xD5,0x30,0xFC,0xB6,0xE2,0x0F,0xD3,0x66,0x95,0x4F,0x8B,0xBC,0x19,0xA5,0xAB,0x32,0xBB,0xCE,0x6B,0xFA,0x25,0x5B,0xCE,0xF0,0xC7,0x32,0x6F,0x9B,0x71,0xCA,0x6F,0xBF,0xCA,0xB3,0xD9,0x17,0x79,0x7A,0x5E,0x94,0xF9,0x6F,0x9C,0x5C,0x15,0x65,0x99,0x4E,0xEA,0x22,0x3F,0x2F,0xAF,0xD3,0xFC,0x1D,0xB5,0x2C,0x96,0x8C,0xD6,0xA2,0xAA,0xF3,0xB4,0x58,0xAC,0xAA,0xBA,0xCD,0x96,0x6D,0x3A,0xCB,0xDB,0xAC,0x28,0x1B,0x20,0x1D,0xE0,0xF3,0xAC,0xA8,0x9B,0x76,0x94,0x96,0x55,0x36,0x4B,0x33,0x46,0x7E,0xC6,0xD8,0x8F,0x63,0x83,0xBC,0xCA,0xE8,0xFF,0x75,0xD1,0xB6,0xF9,0x32,0x9D,0xE4,0xE7,0xE8,0xE1,0xBB,0xC5,0x72,0x86,0x41,0xFC,0x64,0xD1,0xB4,0xD9,0xE8,0x37,0x4E,0x9A,0xCA,0x03,0xD2,0xA4,0x19,0x35,0x69,0x68,0xAC,0xF4,0x01,0xE1,0xF5,0xB2,0xAE,0x2E,0xEA,0x6C,0x91,0x3E,0x23,0xD4,0x9B,0x74,0xBD,0x9C,0xE5,0x75,0xFA,0x51,0xE3,0xF7,0xD3,0xA0,0x9F,0xDF,0xF7,0x35,0x20,0x7C,0x0E,0x00,0x1F,0x29,0xD1,0x08,0x83,0xF5,0x62,0x91,0xD5,0xD7,0x69,0x9B,0x4D,0xD2,0x66,0x8E,0x2E,0x27,0x59,0x53,0x4C,0x85,0xD4,0xC5,0x92,0x90,0x59,0x64,0x6D,0x51,0x2D,0x47,0xF4,0xC7,0xB4,0x5C,0xCF,0x30,0x57,0xFC,0xDD,0x92,0xFE,0x19,0xA5,0xED,0xBA,0x5E,0x0A,0x31,0xA9,0x9B,0xDF,0x38,0x59,0xAE,0x17,0x13,0xEA,0x9C,0x7A,0x6D,0xAE,0x9B,0x36,0x5F,0x30,0x6D,0x73,0x42,0x56,0xE8,0x99,0xA7,0xD5,0x52,0x49,0x28,0xB4,0xA7,0xB7,0xB2,0x25,0xCF,0x54,0xB1,0xA4,0xD1,0xCF,0x30,0x9E,0x73,0x01,0xF5,0x93,0xD5,0x32,0x7D,0x91,0xAF,0x17,0xF4,0x3D,0x0D,0x8E,0x3A,0x58,0xE4,0xCB,0x6C,0x4A,0x38,0x35,0xA9,0x4E,0x05,0xD3,0xD3,0x8E,0x23,0x6F,0x5B,0xC2,0xAD,0xE1,0x81,0x94,0x44,0xB5,0xC6,0xCD,0xF5,0x2A,0x6B,0x98,0x1A,0x3A,0xED,0x6D,0x9E,0x2D,0xC6,0xE9,0x59,0x4B,0x8C,0x42,0x64,0x25,0x42,0x17,0xD3,0xAC,0x25,0xC2,0x5D,0xCD,0x8B,0xE9,0xFC,0x37,0x4E,0xF4,0x35,0xA6,0xF1,0x8C,0x78,0x82,0x06,0x39,0xAF,0xD6,0x17,0x73,0xDB,0x67,0x3A,0xAB,0xF2,0x66,0xF9,0x31,0x21,0x5F,0xAF,0x1B,0x0C,0x81,0x50,0xBA,0xCC,0xCA,0x75,0x0E,0xDC,0x9B,0xDC,0x30,0x24,0xE1,0x24,0x5C,0xE7,0xA1,0xA4,0x7C,0x98,0x6E,0xE5,0xE3,0x8B,0x71,0xFA,0x6D,0x8C,0xEE,0x8E,0xA1,0x5E,0x51,0xA7,0x05,0xF5,0x57,0xA6,0xF3,0xEC,0x07,0x19,0x4D,0x5D,0x9D,0xF1,0x80,0x08,0xDA,0xB7,0x83,0x0F,0x18,0xB1,0xB2,0x78,0xEB,0x68,0x98,0x2F,0x56,0x39,0x7D,0xB9,0xAE,0xC1,0x5E,0x15,0x21,0x68,0xBA,0xE1,0x56,0xC4,0xFE,0xF3,0xAA,0x1D,0xA7,0xBF,0x0F,0x51,0x79,0x9A,0x2D,0x7F,0xE3,0x64,0x4A,0x34,0xBF,0xC8,0x41,0x7A,0xFA,0x86,0x26,0x67,0x94,0x4E,0xD6,0x2D,0x26,0xA7,0x21,0x08,0x10,0x99,0x45,0xF6,0x16,0x5F,0xD3,0x07,0x18,0xAD,0x69,0x4E,0xA2,0x94,0x4D,0xE7,0x4A,0x55,0x65,0x2C,0x62,0xCC,0xCC,0xEB,0x8F,0x84,0x8F,0x68,0xD5,0xE4,0x86,0xF4,0x32,0xED,0xCD,0xFA,0xFC,0x3C,0xAF,0x2D,0x55,0x5E,0xEA,0x77,0x8E,0x2A,0x3E,0x5C,0x6F,0x6E,0x7D,0x96,0x3B,0x3E,0x73,0xD3,0x49,0xDC,0x4E,0xB4,0x3E,0x3E,0xA3,0x91,0x14,0x97,0x45,0x59,0xFC,0x80,0x19,0x54,0x27,0x77,0x9A,0x93,0x60,0x16,0x1D,0x9E,0xD1,0x57,0x89,0xE2,0xE0,0xC5,0x6B,0x21,0x04,0x4D,0x7F,0x4B,0x1D,0x36,0x44,0x30,0x1A,0x86,0xB2,0xCF,0x38,0x7D,0x51,0xB5,0x4A,0x9B,0xDF,0x9B,0x5E,0xCF,0x96,0x4D,0xBA,0x58,0x97,0x6D,0xB1,0x2A,0x0B,0x1A,0x43,0x7A,0xB6,0xA4,0x57,0x1B,0x66,0x16,0x80,0xCA,0x30,0xDF,0x78,0x91,0x26,0x8D,0x26,0xE6,0x37,0x4E,0x5C,0x5B,0xC6,0x86,0xBE,0x9F,0x66,0x25,0x28,0x5C,0xB5,0x73,0x9E,0x38,0xD7,0xA0,0xE1,0x16,0xFC,0x45,0x4E,0x04,0x9A,0xB6,0x3C,0xF0,0xF3,0x62,0x49,0x2C,0x50,0xE7,0x0D,0xB5,0x23,0x92,0xBD,0xC6,0xEB,0xE1,0x4B,0x75,0x0E,0xDE,0x93,0x57,0x48,0x5E,0x26,0xD7,0xC2,0x94,0x6D,0x3E,0x9D,0x2F,0xAB,0xB2,0xBA,0x28,0x84,0x95,0xE9,0xB5,0xDF,0xBB,0xFB,0x22,0x01,0x3C,0x3B,0xE7,0xF1,0x5F,0x41,0x79,0x65,0xE9,0x94,0xE8,0x46,0x53,0x90,0xD3,0x1F,0x93,0x6A,0xB9,0x6E,0xEE,0xAE,0x88,0x60,0x65,0x7B,0xCD,0x8A,0x19,0xE8,0xD0,0x37,0x45,0x6D,0xA6,0xC3,0x32,0x4E,0x2E,0xC3,0x02,0x7E,0xD9,0x25,0xF3,0x24,0x89,0x00,0x3E,0x76,0xF2,0x3F,0xAD,0xA1,0x78,0x59,0x56,0xA9,0xBF,0x9A,0xB4,0xCA,0xF2,0xED,0x98,0x74,0x6C,0x93,0x67,0x35,0xCD,0x36,0xB5,0xCF,0x40,0x5E,0x66,0x39,0x6A,0x4E,0x9A,0x87,0x94,0x6E,0x4E,0xDC,0xC2,0xB3,0x53,0x2D,0x2F,0x69,0x1E,0x2D,0x10,0xE2,0x3D,0x7F,0x78,0x34,0x0D,0x5F,0x02,0xC2,0xD9,0x72,0x46,0x02,0x58,0x17,0x44,0xB0,0x2F,0xD7,0xED,0x6A,0x4D,0x0A,0x77,0xDD,0x10,0x49,0xDA,0xEA,0x37,0x4E,0x68,0x6A,0xEB,0x0C,0xDA,0x0B,0xDC,0x5D,0x94,0xD0,0x93,0xE7,0x75,0x46,0xAD,0xD7,0x53,0x08,0x0A,0xD3,0xBE,0x99,0x17,0x2B,0x65,0x9B,0x7A,0x4D,0x7C,0x57,0x67,0x33,0x42,0x86,0x65,0x09,0x0C,0x85,0xD9,0x9E,0x42,0x9C,0x8A,0xE6,0x37,0x4E,0xBA,0xD8,0xA6,0x8C,0xAC,0x30,0x60,0x06,0xE6,0x3B,0xFB,0x52,0xB5,0x0B,0x43,0xC1,0x54,0xEB,0x28,0x18,0x21,0x3B,0x14,0xF0,0x3A,0x61,0x47,0x6A,0x73,0x9C,0xBE,0xAC,0x56,0xEB,0x92,0xFB,0x22,0x76,0xAD,0xAE,0xDA,0x28,0x59,0xD2,0x5F,0xB4,0x2E,0xA6,0x6F,0xC9,0x0A,0xAD,0x6C,0xEB,0x86,0x9B,0x8B,0xD8,0xB0,0x02,0x26,0x80,0xA2,0xA2,0xFC,0x36,0x15,0x75,0x9E,0xEE,0xEE,0xEC,0x7C,0x41,0xBC,0x49,0xB6,0x73,0x9A,0xAD,0x56,0xB0,0x1F,0xD2,0x51,0x0D,0x8D,0x47,0xCA,0xD9,0x50,0x29,0xE8,0xF9,0x37,0x4E,0xFC,0x31,0x62,0x42,0x88,0xAC,0xA0,0x39,0xCF,0x83,0x79,0xC3,0x5A,0xCF,0x6F,0x17,0x17,0x73,0x48,0x2E,0x99,0x0E,0x12,0x06,0xFA,0x0D,0xCC,0x93,0x53,0xEF,0xD7,0xA4,0x1A,0x49,0x34,0x8A,0x25,0xF0,0x2B,0x44,0xE2,0xF3,0x77,0xD3,0x7C,0xD5,0x72,0x93,0x33,0xD6,0x76,0xA2,0xDC,0x7C,0xED,0x00,0xA8,0xBE,0x76,0x00,0x24,0xA3,0xEB,0x06,0xD4,0x03,0x3E,0xFB,0xC9,0x17,0xE9,0xB7,0x69,0xB6,0x48,0xD1,0x63,0xB6,0xCF,0x49,0x91,0x93,0x14,0x11,0xFF,0x8A,0xE6,0x5B,0x64,0xD7,0xE9,0xB2,0x6A,0x0B,0xD2,0x06,0x90,0x78,0x9A,0x9C,0x72,0xBD,0x58,0x42,0x43,0x41,0x30,0xD3,0x4F,0xD8,0x50,0x35,0xEE,0x73,0x4C,0x20,0x8B,0x84,0xF9,0x84,0x88,0xCC,0x06,0x42,0xDC,0x0B,0xEB,0x5D,0xD0,0x70,0x88,0xAA,0x4B,0x98,0xC9,0x92,0x10,0x5E,0x14,0xA0,0xC8,0xB1,0xDA,0x03,0x22,0xE3,0xF6,0xAE,0x67,0x61,0x58,0xAD,0x80,0x14,0xBF,0x71,0x72,0x5E,0xE4,0x40,0x93,0xED,0x88,0x22,0x6A,0x65,0xC5,0xFA,0x3A,0xAA,0xD2,0x48,0x57,0x11,0xEA,0xD0,0xD0,0xAC,0xB2,0x72,0xA1,0x96,0x19,0x15,0x3B,0x38,0x4A,0x1E,0x18,0xE5,0x46,0xF4,0xF9,0xD2,0xEA,0xB1,0xB2,0x22,0xA9,0xAD,0xE5,0x3B,0x6B,0x88,0x49,0x10,0x96,0x40,0x8A,0x74,0x14,0x8B,0xEE,0x35,0x7C,0x8C,0x45,0xDE,0x16,0x68,0x34,0xAD,0xEA,0x7A,0x4D,0xB3,0xE4,0xB9,0x1C,0x63,0x9D,0x99,0xB4,0x29,0x7E,0xC0,0xAC,0xDD,0xD6,0x15,0xF9,0x3D,0x8B,0xEC,0x5D,0xB1,0x58,0x2F,0x7C,0xC6,0x1B,0xA5,0xA4,0x06,0xF5,0x63,0xF2,0x3B,0x3C,0xDD,0x6C,0x3E,0x9D,0xE5,0xE7,0xF9,0xB2,0x81,0x79,0x69,0x89,0xC1,0x0A,0xC2,0x13,0x40,0xC7,0xCA,0x0A,0x0E,0xB8,0x1A,0x64,0x63,0x5D,0x40,0x07,0x9A,0x8C,0x6A,0x09,0x0C,0xB2,0x54,0x26,0x9A,0xB5,0x6C,0x4B,0x4D,0xE9,0x9F,0x69,0xD5,0xB4,0xAC,0x63,0x88,0x88,0xD3,0x1C,0x52,0x92,0x67,0x2D,0xFC,0x37,0xD6,0x95,0xBF,0x71,0x52,0x38,0x7D,0x51,0xA9,0xBE,0x30,0xF4,0x65,0x57,0x80,0xC8,0xC2,0xFA,0x03,0xCC,0xB9,0x28,0x96,0x60,0x2C,0xD6,0x0D,0xF9,0x39,0xFF,0x41,0xF3,0x4A,0xAA,0xB2,0xAE,0x0A,0xEE,0xF5,0x37,0x4E,0xF2,0x77,0x24,0xEB,0x50,0xD5,0xDA,0x5D,0x36,0x63,0x49,0xCF,0x8C,0x64,0x78,0x5F,0x55,0x4B,0xE2,0x3B,0xFB,0xF6,0x17,0x02,0xDB,0xAA,0xB4,0x6B,0xD6,0x30,0xB5,0xEA,0x46,0x9A,0x5E,0x52,0x3C,0x81,0xB2,0x8A,0xA9,0x05,0x37,0x18,0x22,0xC7,0xCC,0xF6,0x4A,0x6D,0xA1,0xE5,0xE1,0x11,0xD0,0x57,0x8D,0x2A,0x22,0x38,0x5C,0x76,0x86,0xC6,0xE9,0x89,0x51,0x5B,0xE2,0x48,0xE6,0x44,0xF1,0x19,0x9C,0x40,0xD7,0x66,0x44,0x14,0xAD,0xD2,0x8B,0x7C,0x09,0x65,0x98,0x83,0x74,0xAC,0x09,0x41,0x8E,0x73,0x70,0xD0,0x32,0xBF,0x92,0xB9,0xB8,0x16,0x2D,0x3A,0x4E,0xBF,0xBC,0x5A,0xB2,0xF9,0x0E,0xBC,0x29,0xEB,0x2D,0x5C,0xA1,0x2F,0x45,0x91,0x24,0x49,0x1D,0x8E,0x29,0x75,0x7F,0xBE,0x2E,0x89,0x05,0x9B,0xE2,0x82,0x69,0x62,0x48,0x47,0x74,0x24,0xC3,0x48,0x6F,0x1A,0x4F,0x42,0xDC,0xC2,0xEB,0x8F,0x49,0x32,0x96,0xD0,0x08,0x64,0x81,0x68,0x0E,0xA1,0x5B,0xE1,0x85,0x30,0x2F,0xB0,0x08,0x43,0x4D,0x19,0x19,0x6E,0x58,0x87,0x81,0x33,0x94,0x36,0x62,0x36,0xCC,0x1C,0xCB,0xEC,0x83,0x02,0x79,0xC1,0x7D,0xFD,0x80,0xA6,0x87,0x7C,0x18,0x52,0xF6,0xF4,0xD9,0x12,0x3E,0xD3,0x31,0x99,0xAD,0x19,0xA9,0xE7,0x8E,0x08,0x67,0x66,0xEC,0xB0,0xFA,0x93,0x9C,0xDC,0x76,0xF2,0x2E,0x21,0x98,0x3C,0xFF,0xFA,0x0E,0x74,0x92,0xF4,0x4B,0x13,0xF2,0x34,0xA7,0xB9,0xAA,0xAE,0xD9,0x5F,0xEF,0x80,0x12,0x4F,0xD9,0x81,0xCA,0x96,0xCB,0x82,0xCC,0x77,0xA6,0xC6,0x9D,0xAD,0xAD,0x34,0x99,0x29,0x10,0xF8,0x52,0x18,0x2A,0xD9,0xF6,0x26,0x70,0x40,0x58,0x82,0x59,0xE7,0x12,0x1E,0xB3,0x4A,0x94,0x1B,0x79,0x2A,0x3E,0x32,0x1C,0x6D,0x94,0xC4,0x5C,0x86,0x82,0x04,0x8C,0x01,0xA9,0x1B,0x9A,0x3E,0x2B,0x33,0x32,0xE8,0xAC,0x9F,0xD4,0xD7,0xCC,0xCF,0xC9,0xDF,0x58,0x66,0x93,0x92,0x30,0xAA,0x96,0xA5,0x78,0x07,0xD9,0xEC,0x32,0x23,0xAE,0x9E,0x81,0x9C,0xF0,0xCA,0xA0,0x10,0x89,0xE0,0xEB,0x92,0x24,0x43,0x66,0x48,0xFC,0x2B,0x02,0x49,0xDE,0xF6,0x49,0xB5,0x98,0xB0,0x84,0xB2,0x68,0x73,0x3F,0x1F,0xD7,0xF9,0x14,0x5A,0x6F,0xCA,0x5F,0x7D,0x6C,0x08,0x63,0xE6,0x05,0xAA,0x0D,0x52,0x49,0xD8,0x41,0xAB,0x7A,0xBC,0xA9,0x36,0x6C,0x9C,0x3E,0xCF,0x6A,0x56,0x6C,0xEC,0x74,0x34,0x96,0xB2,0x12,0x60,0x04,0xD0,0x53,0xA6,0xB4,0x9D,0x8D,0xE3,0x19,0xB5,0x6C,0x83,0xC9,0x20,0x2A,0x31,0x0F,0x38,0xE9,0x5D,0xC0,0x8D,0xAC,0xE1,0x3E,0xCA,0xD4,0x88,0x00,0xE8,0x9B,0x23,0xA3,0x9C,0x48,0x30,0x48,0xCB,0xC0,0x23,0x9C,0x93,0x81,0x2D,0x96,0x79,0x63,0xBC,0xAF,0x59,0xCE,0xDF,0x60,0x36,0xCE,0xBE,0x1C,0x13,0x59,0x73,0x82,0x3A,0x4A,0x3F,0x47,0x77,0x23,0x44,0x7E,0x22,0x67,0x18,0xEB,0x17,0xA4,0xD3,0x5A,0x30,0x9E,0x1D,0x02,0x38,0x97,0x82,0x03,0x22,0xB5,0xBE,0x36,0xCB,0x57,0x25,0xF3,0xCF,0xBC,0x00,0x6D,0x2F,0x04,0x4A,0xB3,0x02,0x7E,0xA1,0x96,0xCD,0x54,0xCD,0x90,0x16,0x16,0xB0,0x32,0x8B,0x9E,0x91,0x71,0x2C,0x65,0xCD,0xEE,0xF1,0x54,0x9C,0x06,0x72,0x98,0xD7,0x26,0x80,0x36,0xA2,0x47,0xBC,0x64,0x7C,0x90,0x6C,0x4A,0x54,0x20,0x7F,0xB2,0x99,0x5B,0x47,0x9B,0xF9,0xAD,0xB1,0x46,0xF6,0x37,0x4E,0x88,0xEF,0x80,0xB8,0x04,0x08,0xA4,0xE5,0x33,0x03,0x3A,0x5B,0xAE,0x09,0xF2,0x35,0x5B,0x27,0xF9,0xEA,0x3C,0xE7,0xA8,0xA5,0x11,0x8B,0xC7,0x26,0xB5,0x40,0x8C,0x6C,0x54,0x38,0xCD,0x3D,0x71,0x12,0x69,0x31,0xDB,0xFF,0x6C,0xE6,0xAB,0x55,0xC4,0x2A,0x98,0xEB,0x49,0x56,0x93,0x57,0x2C,0x16,0xA1,0xF1,0xFD,0xAA,0xF0,0x4D,0x72,0x09,0xF2,0x6A,0x55,0x72,0x2C,0xC3,0x51,0xB2,0xF2,0x14,0x51,0xD5,0xBC,0xEA,0x39,0x44,0xCB,0x06,0x11,0x3E,0xBD,0x6A,0x5D,0x9E,0x46,0x9B,0x49,0x8C,0xD4,0xB2,0x23,0x47,0xB4,0xAB,0xA0,0xF9,0x1A,0x09,0xDE,0x7A,0xAA,0x3B,0xC0,0x9C,0xC4,0xA6,0xCE,0x17,0xE4,0x98,0x31,0xB3,0x5A,0xF5,0x2D,0x5A,0xF9,0x37,0x4E,0xBE,0xCB,0x16,0x8D,0x0D,0xAC,0x79,0x0D,0xAC,0xCE,0xEF,0x35,0xF3,0xBA,0x58,0xBE,0xB5,0x18,0x10,0x47,0x92,0x36,0x28,0xE0,0x0B,0xA4,0xC2,0xCD,0x10,0x0C,0xF3,0xD6,0x14,0x44,0x25,0x35,0x46,0x8A,0x3A,0x33,0x5F,0xFA,0x63,0x43,0xD7,0x13,0x7C,0xAB,0xD0,0xCC,0x7B,0xFD,0x91,0x8A,0x16,0x5F,0x56,0x26,0x2C,0x16,0x23,0xBC,0x06,0xB9,0x41,0x1A,0x6B,0x8E,0xC9,0x7A,0xB2,0x3A,0x83,0x06,0x42,0x8C,0x8F,0x66,0x34,0x2B,0xB9,0xDF,0x46,0x34,0xC1,0x1B,0x04,0x4E,0xC4,0xE9,0x0D,0x41,0x25,0x55,0x2E,0x3A,0x93,0x6D,0x0A,0x31,0x93,0xF8,0x7A,0xE2,0x1B,0xB1,0xDE,0x22,0x33,0x06,0x7C,0xC4,0x14,0x2B,0x2B,0x31,0xD3,0x7E,0x17,0xDF,0x36,0x1C,0x7D,0x90,0xCC,0xAA,0x3F,0xD8,0x7E,0x4C,0x94,0x29,0xAF,0xB2,0x6B,0x62,0xDE,0x7A,0x3D,0x03,0xBB,0xC3,0x71,0x82,0x31,0x21,0xC0,0x48,0xB1,0x48,0xF4,0x82,0x1C,0x0F,0xB3,0x1B,0xF2,0x33,0xF9,0xEC,0x77,0x05,0xC0,0xD3,0xE5,0x4F,0x57,0xD7,0xBF,0xEB,0xFF,0x13,0x00,0x00,0xFF,0xFF,0x55,0x75,0x0C,0x58,0x9E,0x12,0x00,0x00};
            byte[] helpText = Gzip.Decompress(helpC);
            Gzip.write(temp, helpText);
            Process notePad = new Process();
            notePad.StartInfo.FileName   = "notepad.exe";
            notePad.StartInfo.Arguments = temp;
            notePad.Start();
        }

        public void showAbout(object sender, RoutedEventArgs e)
        {
            (new HelpAbout()).Show();
        }

        public void utilityAnalyzeStrings(object sender, RoutedEventArgs e)
        {
            if(rawData.Length == 0)
                return;
            utility.analyzeStrings(rawData, openFile.Substring(0, openFile.Length-4), config.settings);
        }

        public delegate Window CreateWindow();

        private Window popDialog(CreateWindow ctor)
        {
            if(rawData.Length == 0)
                return null;
            if(theDialog != null)
                theDialog.Close();
            theDialog = ctor();
            theDialog.Show();
            return theDialog;
        }

        public void utilitySetMinimumResourceLevel(object sender, RoutedEventArgs e)
        {
            popDialog(() => {return new MinimumResourceLevel((resources, player) => {refreshPane(utility.setResources(parser, resources, player));}); });
        }

        public void utilitySetPopulation(object sender, RoutedEventArgs e)
        {
            popDialog(() => {return new Population((resources, player) => {refreshPane(utility.setPopulation(parser, resources, player));}); });
        }

        public void utilityTerraform(object sender, RoutedEventArgs e)
        {
            popDialog(() => {return new WhichPlayer((player) => {refreshPane(utility.terraform(parser, player));}); });
            WhichPlayer whichPlayer = (WhichPlayer)theDialog;
            whichPlayer.Title = "Terraform";
        }

        public void utilityDustball(object sender, RoutedEventArgs e)
        {
            popDialog(() => {return new WhichPlayer((player) => {refreshPane(utility.terraformDustballs(parser, player));}); });
            WhichPlayer whichPlayer = (WhichPlayer)theDialog;
            whichPlayer.Title = "Terraform Dustballs";
        }

        public void utilityInfra(object sender, RoutedEventArgs e)
        {
            popDialog(() => {return new MinMax((levels, player) => {refreshPane(utility.setInfrastructure(parser, levels, player));}); });
            MinMax dialog = (MinMax)theDialog;
            dialog.Title = "Infrastructure";
            dialog.labelMin.Content = "Minimum Infrastructure %";
            dialog.labelMax.Content = "Maximum Infrastructure %";
        }

        public void utilitySize(object sender, RoutedEventArgs e)
        {
            popDialog(() => {return new MinMax((levels, player) => {refreshPane(utility.setSize(parser, levels, player));}); });
            MinMax dialog = (MinMax)theDialog;
            dialog.Title = "Planet Size";
            dialog.labelMin.Content = "Minimum Planet Size";
            dialog.labelMax.Content = "Maximum Planet Size";
        }

        public void utilityAddiction(object sender, RoutedEventArgs e)
        {
            popDialog(() => {return new WhichPlayer((player) => {refreshPane(utility.cureAddiction(parser, player));}); });
            WhichPlayer whichPlayer = (WhichPlayer)theDialog;
            whichPlayer.Title = "Cure Addiction (temporary)";
        }
        
        private void closeFile()
        {
            this.Title = originalTitle;
            rawData  = new byte[0];
            if(mainTabs != null && mainTabs.Items != null)
                mainTabs.Items.Clear();
            if(parser != null)
                parser.clear();
            openFile = "";
        }

        protected override void OnClosing(System.ComponentModel.CancelEventArgs e)
        {
            closeFile();
            if(theDialog != null)
                theDialog.Close();
            base.OnClosing(e);
        }

        private void refreshPane(int pane)
        {
            if(pane == -1)
                return;
            TabItem item = (TabItem)mainTabs.Items[pane];
            DataGrid grid = (DataGrid)item.Content;
            stopEdit(grid);
            grid.Items.Refresh();
        }

        byte[] rawData;
        string originalTitle;
        string openFile;
        Parse parser;
        Utility utility;
        Window theDialog;
        Config config;
        public List<int> resourceLevel;
    }
}
